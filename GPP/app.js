/*
const express = require('express')
const app = express()
const path = require('path')

const routes = require('./routes/index')
const create = require('./routes/create')
const executed = require('./routes/executed')

app.set('views', path.join(__dirname, 'views'));
app.set('view engine', 'pug');

app.use(express.static('public'))
app.use(express.static('public/javascripts'))
app.use(express.static('public/stylesheets'))
app.get('/', (req, res) => res.sendFile(path.join(__dirname + '/public/indexopenlayers.html')))
app.listen(3000, () => console.log('Example app listening on port 3000!'))*/

var express = require('express');
var session = require('express-session');
var path = require('path');
var favicon = require('static-favicon');
var logger = require('morgan');
var cookieParser = require('cookie-parser');
var bodyParser = require('body-parser');

var create = require('./routes/create');
var executed = require('./routes/executed');

var app = express();

// view engine setup
app.set('views', path.join(__dirname, 'views'));
app.set('view engine', 'pug');

app.use(express.static('public'))
app.use(express.static('public/javascripts'))
app.use(express.static('public/stylesheets'))
app.use(favicon());
app.use(logger('dev'));
app.use(bodyParser.json());
app.use(bodyParser.urlencoded());
app.use(cookieParser());
app.use(session({secret: 'super secret',saveUninitialized: false, resave: true}));
app.use(express.static(path.join(__dirname, 'public')));

app.use('/create', create);
app.use('/execute', executed);
app.get('/', (req, res) => res.sendFile(path.join(__dirname + '/public/indexopenlayers.html')))

/// catch 404 and forwarding to error handler
app.use(function(req, res, next) {
    var err = new Error('Not Found');
    err.status = 404;
    next(err);
});

/// error handlers

// development error handler
// will print stacktrace
if (app.get('env') === 'development') {
    app.use(function(err, req, res, next) {
        res.status(err.status || 500);
        res.render('error', {
            message: err.message,
            error: err
        });
    });
}

// production error handler
// no stacktraces leaked to user
app.use(function(err, req, res, next) {
    res.status(err.status || 500);
    res.render('error', {
        message: err.message,
        error: {}
    });
});
app.listen(3000, () => console.log('Example app listening on port 3000!'))

module.exports = app;


/*
// Generated by CoffeeScript 1.12.7
(function() {
  var app, fs, http, url;

  http = require("http");

  url = require("url");

  fs = require("fs");

  app = http.createServer(function(request, response) {
    var error, example, path;
    path = url.parse(request.url).pathname;

    try {
      example = require("." + path);
      return new example(request, response);
    } catch (error1) {
      error = error1;
      console.error(error);
      response.writeHead(200, {
        "Content-Type": "text/html; charset=utf-8"
      });
      response.write('<a href="./public/javascripts/1-new-payment">Try example 1</a><br>');
      response.write('<a href="./4-ideal-payment">Try example 4</a><br>');
      return response.end();
    }
  });

  app.listen(3000);

  console.log("==> http://localhost:3000");

}).call(this);*/
